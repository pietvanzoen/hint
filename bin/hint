#!/usr/bin/env ruby
require_relative "../lib/hint"
require "tmpdir"

def main
  hint = Hint.new
  cmd = ARGV[0]
  case cmd
  when "view", "v"
    hint.view_cmd
  when "add", "a"
    hint.add_cmd
  when "edit", "e"
    hint.edit_cmd
  when "remove"
    hint.remove_cmd
  when "help", "h", nil
    Print.help(ARGV[1])
  else
    puts "Unknown command '#{cmd}'"
    puts "See 'hint help' for available commands"
    exit(1)
  end
end

class Hint
  TEMP_CONTENT_FILE = "#{Dir.tmpdir}/HINT_TEMPCONENT.md".freeze
  HINT_DB = ENV["HINT_DB"] || "#{Dir.home}/.hint_db.yml".freeze

  def initialize
    @repo = NotesRepo.new(HINT_DB)
  end

  def view_cmd
    assert_max_arg_count 2
    find = ARGV[1]
    if find.nil?
      Print.books(@repo.find_all)
      return
    end

    notes = @repo.find_all("book" => find)
    return Print.notes(notes) unless notes.empty?

    note = @repo.find("id" => find)
    return Print.note(note) unless note.nil?

    puts "Could not find book or note with id '#{find}'."
    exit(1)
  end

  def add_cmd
    assert_max_arg_count 2
    cmd = ARGV[0]
    book = ARGV[1]
    Util.assert(book, "Book name is required. See 'hint help #{cmd}'.")
    note_data = edit_note("book" => book)
    n = @repo.create!("book" => note_data["book"], "content" => note_data["content"])
    puts "Saved new note:"
    Print.note(n)
  end

  def edit_cmd
    assert_max_arg_count 2
    note = get_note_from_args
    note_data = edit_note("book" => note.book, "content" => note.content)
    @repo.update!(note.id, note_data)
    puts "Edited note: "
    Print.note(note)
  end

  def remove_cmd
    assert_max_arg_count 2
    note = get_note_from_args
    Print.note(note)
    print "==> Confirm delete the above note: [yn] "
    ans = STDIN.gets.strip
    exit(0) unless ans == "y"
    @repo.archive!("id" => note.id)
  end

  def get_note_from_args
    cmd = ARGV[0]
    id = ARGV[1]
    Util.assert(id, "Note id is required. See 'hint help #{cmd}'.")
    note = @repo.find("id" => id)
    if note.nil?
      puts "Could not find note with id #{id}."
      exit(1)
    end
    note
  end

  def edit_note(params)
    front_matter = {
      "book" => params.fetch("book"),
    }
    content = params.fetch("content", "")
    template = "#{front_matter.to_yaml}\n---\n#{content}"
    File.write(TEMP_CONTENT_FILE, template)
    system((ENV["EDITOR"]).to_s, TEMP_CONTENT_FILE)
    md = File.read(TEMP_CONTENT_FILE)
    content_parts = md.split("---")
    data = {
      "book" => YAML.safe_load(md).fetch("book", "").strip || front_matter["book"],
      "content" => content_parts[2..content_parts.count].join("---").strip,
    }
    if data["content"].empty?
      puts "Note content is required."
      exit(1)
    end
    data
  end

  def assert_max_arg_count(n)
    Util.assert(ARGV.count <= n, "Too many arguments. See 'hint help #{ARGV[0]}' for help.")
  end
end

module Print
  def self.books(notes)
    bullet = "•".blue
    puts "#{notes.count} notes:"
    notes.sort_by(&:book).group_by(&:book).each do |key, notes|
      count = "(#{notes.count})".yellow
      puts "#{bullet} #{key} #{count}"
    end
  end

  def self.notes(notes)
    puts "#{notes.count} notes:"
    notes.each do |note|
      id = format("%-5.4s", "(#{note.id})").yellow
      puts " #{id} #{Util.truncate(note.content, 160)}"
    end
  end

  def self.note(note)
    Util.assert(note, "Could not find note.")
    bullet = "•".blue
    puts "#{bullet} id:         #{note.id}"
    puts "#{bullet} book:       #{note.book}"
    puts "#{bullet} created at: #{note.created_at}"
    puts "#{bullet} updated at: #{note.updated_at}"
    puts
    puts "------ content -------"
    puts note.content
    puts "----------------------"
  end

  def self.help(cmd = nil)
    case cmd
    when "a", "add"
      msg = "USAGE: hint add <book>
Add a new note. $EDITOR will open for input."
    when "e", "edit"
      msg = "USAGE: hint edit <note id>
Edit a note."
    when "remove"
      msg = "USAGE: hint remove <note id>
Remove a note."
    when "view", "v"
      msg = "USAGE: hint view [<book|note id>]
List books, notes, or view a single note."
    else
      msg = "USAGE: hint [command]

Available commands:
  add, a      Add a note
  edit, e     Edit a note
  help        Help about any command
  remove      Remove a note or a book
  view, v     List books, notes or view a content

Data is stored in ~/.hint_db.yml by default. You can override this by setting $HINT_DB in your environment."
    end

    puts msg.strip
  end
end

module Util
  def self.truncate(str, length)
    return str unless str.length > length

    str = str.lines.first.strip
    more = "[---more---]".yellow
    "#{str[0, length]} #{more}"
  end

  def self.assert(val, msg)
    return if val

    STDERR.puts msg
    exit(1)
  end
end

class String
  def colorize(color_code)
    "\e[#{color_code}m#{self}\e[0m"
  end

  def red
    colorize(31)
  end

  def green
    colorize(32)
  end

  def yellow
    colorize(33)
  end

  def blue
    colorize(34)
  end

  def pink
    colorize(35)
  end

  def light_blue
    colorize(36)
  end
end

main if $PROGRAM_NAME == __FILE__
